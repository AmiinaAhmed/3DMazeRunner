/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainGame;
import Maze_Generator.MazeGenerator;
import java.util.ArrayList;
import java.util.Collections;
import static Maze_Generator.MazeGenerator.EMPTY_SPACE;
import Game_Object.GameObject;
import Game_Object.Position;
/**
 * A class encapsulating the maze with game objects and the methods to add and remove game objects from the maze.
 * @author Amina A. Abounawara
 */
public class GameMap {
    private final int height;
    private final int width;
    private char[][] map;
    private ArrayList<Integer> random_X;
    private ArrayList<Integer> random_Y;

    /**
     * @param mazeHeight the number of rows of the maze defined by the player
     * @param mazeWidth  the number of columns of the maze defined by the player
     */
    GameMap(int mazeHeight, int mazeWidth) {
        this.map = new MazeGenerator(mazeHeight, mazeWidth).generate();
        this.height = map.length;
        this.width = map[0].length;
        randomize_X();
        randomize_Y();
    }

    /**
     * Returns a 2D array of characters representing the game map.
     *
     * @return a 2D array of characters representing the game map
     */
    public char[][] getMap() {
        return map;
    }

    /**
     * Returns the height of {@link #map}.
     *
     * @return the height of {@link #map}
     */
    public int getHeight() {
        return height;
    }

    /**
     * Returns the width of {@link #map}.
     *
     * @return the width of {@link #map}
     */
    public int getWidth() {
        return width;
    }

    /**
     * Adds the icon character of the specified {@link GameObject} to the game map at its position.
     *
     * @param object the game object to be added
     */
    void addToMap(GameObject object) {
        map[object.getY()][object.getX()] = object.getIcon();
    }

    /**
     * Removes the icon character of the specified {@link GameObject} from the game map at its position.
     *
     * @param object the game object to be removed
     */
    void removeFromMap(GameObject object) {
        map[object.getY()][object.getX()] = EMPTY_SPACE;
    }

    /**
     * Generates a list of random x-coordinates that are valid in the map.
     * This method is used to ensure that there's no duplicate coordinates being generated.
     * <p>
     * The sequence of valid x-coordinates is an arithmetic progression such that:
     * <ul>
     * <li>the first term is 2</li>
     * <li>the difference between the consecutive terms is 4</li>
     * <li>the largest term is less than the {@link #width} of the game map</li>
     * </ul>
     * <p>
     * Example: 2, 6, 10, 14, 18, ...
     */
    private void randomize_X() {
        this.random_X = new ArrayList<>();
        for (int i = 2; i < this.width; i += 4) this.random_X.add(i);
        Collections.shuffle(this.random_X);
    }

    /**
     * Generates a list of random y-coordinates that are valid in the map.
     * This method is used to ensure that there's no duplicate coordinates being generated.
     * <p>
     * The sequence of valid y-coordinates is an arithmetic progression such that:
     * <ul>
     * <li>the first term is 1</li>
     * <li>the difference between the consecutive terms is 2</li>
     * <li>the largest term is less than the {@link #height} of the game map</li>
     * </ul>
     * <p>
     * Example: 1, 3, 5, 7, 9, ....
     */
    private void randomize_Y() {
        this.random_Y = new ArrayList<>();
        for (int i = 1; i < this.height; i += 2) this.random_Y.add(i);
        Collections.shuffle(this.random_Y);
    }

    /**
     * Returns a {@link Position} object generated by using the random x and y coordinates.
     * The result is passed to the constructor while creating {@link GameObject} so that we can have our
     * game objects scattered randomly on the game map for each new game.
     *
     * @return a Position object with random x and y coordinates
     */
    Position getRandomPosition() {
        return new Position(random_X.remove(0), random_Y.remove(0));
    }

}
